You're welcome! Now, let's configure the Kafka consumer to fetch SSL files from Vault and use them in its configuration.


---

Steps to Implement the Kafka Consumer Configuration

1. Consumer Configuration Using Vault SSL Files

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.config.SslConfigs;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaConsumerSSLConfig {

    private final VaultSSLService vaultSSLService;

    public KafkaConsumerSSLConfig(VaultSSLService vaultSSLService) {
        this.vaultSSLService = vaultSSLService;
    }

    @Bean
    public ConsumerFactory<String, String> consumerFactory() throws Exception {
        Map<String, Object> configProps = new HashMap<>();
        
        configProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "your-kafka-broker:9093");
        configProps.put(ConsumerConfig.GROUP_ID_CONFIG, "your-consumer-group");
        configProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        configProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        configProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        // Fetch SSL files from Vault and store in /tmp
        String trustStorePath = vaultSSLService.fetchAndStoreFile("secret/kafka/truststore", "truststore.jks");
        String keyStorePath = vaultSSLService.fetchAndStoreFile("secret/kafka/keystore", "keystore.jks");

        // SSL Configurations
        configProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, trustStorePath);
        configProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, "your-truststore-password");

        configProps.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, keyStorePath);
        configProps.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, "your-keystore-password");
        configProps.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, "your-key-password");

        configProps.put("security.protocol", "SSL");

        return new DefaultKafkaConsumerFactory<>(configProps);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() throws Exception {
        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }
}


---

2. Kafka Consumer with @KafkaListener

Now, you can use @KafkaListener to consume messages from a topic.

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class KafkaConsumerService {

    @KafkaListener(topics = "your-topic-name", groupId = "your-consumer-group")
    public void consume(String message) {
        System.out.println("Received message: " + message);
    }
}


---

How This Works

1. The KafkaConsumerSSLConfig fetches SSL certificates from Vault and stores them in /tmp.


2. It dynamically configures the consumer factory with the SSL properties.


3. @KafkaListener is used to listen for messages from Kafka securely over SSL.




---

Next Steps

Ensure your consumer group matches whatâ€™s configured in Kafka.

Test the consumer by publishing messages using your producer.

Secure Vault access to prevent unauthorized access to the SSL certificates.


Let me know if you need help testing this setup!

