Got it! We will keep things simple without using reactive or GraphQL for now. Since you're using Couchbase, I'll focus on building entities, repositories, services, and controllers for the Customer Microservice as per your request. Below is the breakdown for each component.

Customer Microservice Design

1. Entities

CustomerEntity

import org.springframework.data.couchbase.core.mapping.Document;
import org.springframework.data.annotation.Id;
import java.util.List;

@Document
public class CustomerEntity {
    @Id
    private String id;
    private String name;
    private String email;
    private String phone;
    private Address address;
    private List<String> enrolledOffers;  // List of Offer IDs
    
    // getters and setters
}

CustomerPreferenceEntity

import org.springframework.data.couchbase.core.mapping.Document;
import org.springframework.data.annotation.Id;

@Document
public class CustomerPreferenceEntity {
    @Id
    private String id;
    private CustomerEntity customer;
    private PreferredRewardType preferredRewardType; // Enum: Cashback, Discount, Points
    
    // getters and setters
}

CustomerActivityEntity

import org.springframework.data.couchbase.core.mapping.Document;
import org.springframework.data.annotation.Id;
import java.util.List;

@Document
public class CustomerActivityEntity {
    @Id
    private String id;
    private CustomerEntity customer;
    private List<String> activities; // List of activity descriptions
    
    // getters and setters
}

Address

public class Address {
    private String street;
    private String city;
    private String state;
    private String zipCode;

    // getters and setters
}

PreferredRewardType Enum

public enum PreferredRewardType {
    CASHBACK,
    DISCOUNT,
    POINTS
}

2. Repository Layer

Since you're using Couchbase, the repository would extend CouchbaseRepository. Here are the repositories:

CustomerRepository

import org.springframework.data.couchbase.repository.CouchbaseRepository;

public interface CustomerRepository extends CouchbaseRepository<CustomerEntity, String> {
    CustomerEntity findByEmail(String email);
}

CustomerPreferenceRepository

import org.springframework.data.couchbase.repository.CouchbaseRepository;

public interface CustomerPreferenceRepository extends CouchbaseRepository<CustomerPreferenceEntity, String> {
    CustomerPreferenceEntity findByCustomerId(String customerId);
}

CustomerActivityRepository

import org.springframework.data.couchbase.repository.CouchbaseRepository;

public interface CustomerActivityRepository extends CouchbaseRepository<CustomerActivityEntity, String> {
    List<CustomerActivityEntity> findByCustomerId(String customerId);
}

3. DTOs (Data Transfer Objects)

These will be used for request and response data models in the controllers.

CustomerDTO

public class CustomerDTO {
    private String id;
    private String name;
    private String email;
    private String phone;
    private AddressDTO address;
    private List<String> enrolledOffers;
    
    // getters and setters
}

CustomerPreferenceDTO

public class CustomerPreferenceDTO {
    private String id;
    private String customerId;
    private PreferredRewardType preferredRewardType;
    
    // getters and setters
}

CustomerActivityDTO

public class CustomerActivityDTO {
    private String id;
    private String customerId;
    private List<String> activities;
    
    // getters and setters
}

AddressDTO

public class AddressDTO {
    private String street;
    private String city;
    private String state;
    private String zipCode;
    
    // getters and setters
}

4. REST Controllers

The controllers will handle the incoming requests for the Customer microservice.

CustomerController

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/customers")
public class CustomerController {

    private final CustomerService customerService;

    public CustomerController(CustomerService customerService) {
        this.customerService = customerService;
    }

    @PostMapping
    public CustomerDTO createCustomer(@RequestBody CustomerDTO customerDTO) {
        return customerService.createCustomer(customerDTO);
    }

    @GetMapping("/{id}")
    public CustomerDTO getCustomer(@PathVariable String id) {
        return customerService.getCustomer(id);
    }

    @PutMapping("/{id}")
    public CustomerDTO updateCustomer(@PathVariable String id, @RequestBody CustomerDTO customerDTO) {
        return customerService.updateCustomer(id, customerDTO);
    }
}

CustomerPreferenceController

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/customer-preferences")
public class CustomerPreferenceController {

    private final CustomerPreferenceService customerPreferenceService;

    public CustomerPreferenceController(CustomerPreferenceService customerPreferenceService) {
        this.customerPreferenceService = customerPreferenceService;
    }

    @GetMapping("/{customerId}")
    public CustomerPreferenceDTO getCustomerPreference(@PathVariable String customerId) {
        return customerPreferenceService.getCustomerPreference(customerId);
    }

    @PostMapping
    public CustomerPreferenceDTO createCustomerPreference(@RequestBody CustomerPreferenceDTO customerPreferenceDTO) {
        return customerPreferenceService.createCustomerPreference(customerPreferenceDTO);
    }
}

CustomerActivityController

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/customer-activities")
public class CustomerActivityController {

    private final CustomerActivityService customerActivityService;

    public CustomerActivityController(CustomerActivityService customerActivityService) {
        this.customerActivityService = customerActivityService;
    }

    @GetMapping("/{customerId}")
    public CustomerActivityDTO getCustomerActivities(@PathVariable String customerId) {
        return customerActivityService.getCustomerActivities(customerId);
    }

    @PostMapping
    public CustomerActivityDTO createCustomerActivity(@RequestBody CustomerActivityDTO customerActivityDTO) {
        return customerActivityService.createCustomerActivity(customerActivityDTO);
    }
}

5. Service Layer (CQRS Pattern)

For simplicity, the service layer will handle the business logic. Hereâ€™s the service interface and implementation.

CustomerService

import org.springframework.stereotype.Service;

@Service
public class CustomerService {

    private final CustomerRepository customerRepository;

    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    public CustomerDTO createCustomer(CustomerDTO customerDTO) {
        // Business logic to create customer
        CustomerEntity customerEntity = new CustomerEntity(); // Map DTO to Entity
        customerRepository.save(customerEntity);
        return customerDTO;  // Map entity to DTO and return
    }

    public CustomerDTO getCustomer(String id) {
        // Business logic to retrieve customer
        CustomerEntity customerEntity = customerRepository.findById(id).orElseThrow(() -> new RuntimeException("Customer not found"));
        return new CustomerDTO(); // Map entity to DTO and return
    }

    public CustomerDTO updateCustomer(String id, CustomerDTO customerDTO) {
        // Business logic to update customer
        CustomerEntity customerEntity = new CustomerEntity(); // Map DTO to Entity
        customerRepository.save(customerEntity);
        return customerDTO;  // Map entity to DTO and return
    }
}

CustomerPreferenceService

import org.springframework.stereotype.Service;

@Service
public class CustomerPreferenceService {

    private final CustomerPreferenceRepository customerPreferenceRepository;

    public CustomerPreferenceService(CustomerPreferenceRepository customerPreferenceRepository) {
        this.customerPreferenceRepository = customerPreferenceRepository;
    }

    public CustomerPreferenceDTO getCustomerPreference(String customerId) {
        // Business logic to retrieve customer preference
        CustomerPreferenceEntity preferenceEntity = customerPreferenceRepository.findByCustomerId(customerId);
        return new CustomerPreferenceDTO(); // Map entity to DTO and return
    }

    public CustomerPreferenceDTO createCustomerPreference(CustomerPreferenceDTO customerPreferenceDTO) {
        // Business logic to create customer preference
        CustomerPreferenceEntity preferenceEntity = new CustomerPreferenceEntity(); // Map DTO to Entity
        customerPreferenceRepository.save(preferenceEntity);
        return customerPreferenceDTO;  // Map entity to DTO and return
    }
}

CustomerActivityService

import org.springframework.stereotype.Service;

@Service
public class CustomerActivityService {

    private final CustomerActivityRepository customerActivityRepository;

    public CustomerActivityService(CustomerActivityRepository customerActivityRepository) {
        this.customerActivityRepository = customerActivityRepository;
    }

    public CustomerActivityDTO getCustomerActivities(String customerId) {
        // Business logic to retrieve customer activities
        List<CustomerActivityEntity> activities = customerActivityRepository.findByCustomerId(customerId);
        return new CustomerActivityDTO(); // Map entities to DTO and return
    }

    public CustomerActivityDTO createCustomerActivity(CustomerActivityDTO customerActivityDTO) {
        // Business logic to create customer activity
        CustomerActivityEntity activityEntity = new CustomerActivityEntity(); // Map DTO to Entity
        customerActivityRepository.save(activityEntity);
        return customerActivityDTO;  // Map entity to DTO and return
    }
}

6. JUnit & Mockito Tests

JUnit and Mockito tests will ensure that the controllers and services are functioning correctly.

CustomerControllerTest

import static org.mockito.Mockito.*;
import org.junit.jupiter.api.Test;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.beans.factory.annotation.Autowired;

@ExtendWith(MockitoExtension.class)
public class CustomerControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CustomerService customerService;

    @Test
    public void testCreateCustomer() throws Exception {
        CustomerDTO customerDTO = new CustomerDTO();
        when(customerService.createCustomer(any(CustomerDTO.class))).thenReturn(customerDTO);

        mockMvc.perform(post("/customers")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new ObjectMapper().writeValueAsString(customerDTO)))
                .andExpect(status().isOk());
    }

    // Similar tests for other endpoints
}

7. Postman Scripts

For testing the APIs, you will start by setting up basic data (Customer and Merchant), then proceed with creating campaigns, offers, and other events.

Create Customer
POST /customers with CustomerDTO data.

Get Customer
GET /customers/{id} with customer ID.

Create Customer Preference
POST /customer-preferences with CustomerPreferenceDTO data.

Create Customer Activity
POST /customer-activities with CustomerActivityDTO data.


You can write these requests in Postman and save the collection for testing purposes.

Let me know if you need further details on any part!

