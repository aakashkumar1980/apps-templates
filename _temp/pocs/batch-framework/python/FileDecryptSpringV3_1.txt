import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.operator.jcajce.JcePGPContentVerifierBuilderProvider;
import org.bouncycastle.openpgp.operator.jcajce.JcePublicKeyDataDecryptorFactoryBuilder;
import org.springframework.stereotype.Service;

import java.io.*;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.util.Iterator;

@Service
public class PgpDecryptionService {
    public void decryptFile(String inputFilePath, String outputFilePath, String privateKeyFilePath, char[] passPhrase) throws IOException, PGPException, NoSuchProviderException {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        InputStream in = new BufferedInputStream(new FileInputStream(inputFilePath));
        InputStream keyIn = new BufferedInputStream(new FileInputStream(privateKeyFilePath));
        decryptFile(in, keyIn, passPhrase, new FileOutputStream(outputFilePath));
        in.close();
        keyIn.close();
    }

    private static void decryptFile(InputStream in, InputStream keyIn, char[] passwd, OutputStream out) throws IOException, NoSuchProviderException, PGPException {
        in = PGPUtil.getDecoderStream(in);

        PGPObjectFactory pgpF = new PGPObjectFactory(in, new JcaKeyFingerprintCalculator());
        PGPEncryptedDataList enc;

        Object o = pgpF.nextObject();
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else {
            enc = (PGPEncryptedDataList) pgpF.nextObject();
        }

        Iterator it = enc.getEncryptedDataObjects();
        PGPPrivateKey sKey = null;
        PGPPublicKeyEncryptedData pbe = null;

        while (sKey == null && it.hasNext()) {
            pbe = (PGPPublicKeyEncryptedData) it.next();
            sKey = findPrivateKey(keyIn, pbe.getKeyID(), passwd);
        }

        if (sKey == null) {
            throw new IllegalArgumentException("Secret key for message not found.");
        }

        InputStream clear = pbe.getDataStream(new JcePublicKeyDataDecryptorFactoryBuilder().setProvider("BC").build(sKey));

        PGPObjectFactory plainFact = new PGPObjectFactory(clear, new JcaKeyFingerprintCalculator());

        Object message = plainFact.nextObject();

        if (message instanceof PGPCompressedData) {
            PGPCompressedData cData = (PGPCompressedData) message;
            PGPObjectFactory pgpFact = new PGPObjectFactory(cData.getDataStream(), new JcaKeyFingerprintCalculator());

            message = pgpFact.nextObject();
        }

        if (message instanceof PGPLiteralData) {
            PGPLiteralData ld = (PGPLiteralData) message;
            InputStream unc = ld.getInputStream();
            int ch;
            while ((ch = unc.read()) >= 0) {
                out.write(ch);
            }
        } else if (message instanceof PGPOnePassSignatureList) {
            throw new PGPException("Encrypted message contains a signed message - not literal data.");
        } else {
            throw new PGPException("Message is not a simple encrypted file - type unknown.");
        }

        if (pbe.isIntegrityProtected()) {
            if (!pbe.verify()) {
                throw new PGPException("Message failed integrity check");
            }
        }
    }

    private static PGPPrivateKey findPrivateKey(InputStream keyIn, long keyID, char[] pass) throws IOException, PGPException {
        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyIn), new JcaKeyFingerprintCalculator());

        PGPSecretKey pgpSecKey = pgpSec.getSecretKey(keyID);
        if (pgpSecKey == null) {
            return null;
        }

        return pgpSecKey.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider("BC").build(pass));
    }
}



serviceV2
---------
import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.operator.jcajce.*;
import org.springframework.stereotype.Service;
import java.io.*;
import java.util.zip.GZIPInputStream;

@Service
public class PgpDecryptionService {
    public void decryptFile(String inputFilePath, String outputFilePath, String privateKeyFilePath, char[] password) throws IOException, PGPException {
        PGPPrivateKey privateKey = readPrivateKey(privateKeyFilePath, password);
        File decryptedFile = decryptToTempFile(inputFilePath, privateKey);
        decompressFile(decryptedFile, outputFilePath);
    }

    private PGPPrivateKey readPrivateKey(String privateKeyFilePath, char[] password) throws IOException, PGPException {
        InputStream keyIn = new BufferedInputStream(new FileInputStream(privateKeyFilePath));
        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(
            PGPUtil.getDecoderStream(keyIn), new JcaKeyFingerprintCalculator());
        
        Iterator<PGPSecretKeyRing> keyRingIter = pgpSec.getKeyRings();
        while (keyRingIter.hasNext()) {
            PGPSecretKeyRing keyRing = keyRingIter.next();
            Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
            while (keyIter.hasNext()) {
                PGPSecretKey key = keyIter.next();
                if (key.isPrivateKey()) {
                    PGPPrivateKey privateKey = key.extractPrivateKey(
                        new JcePBESecretKeyDecryptorBuilder().setProvider("BC").build(password));
                    if (privateKey != null) {
                        return privateKey;
                    }
                }
            }
        }
        throw new IllegalArgumentException("Valid private key not found in the file.");
    }

    private File decryptToTempFile(String inputFilePath, PGPPrivateKey privateKey) throws IOException, PGPException {
        File tempFile = File.createTempFile("decrypted", null);
        InputStream in = new BufferedInputStream(new FileInputStream(inputFilePath));
        OutputStream out = new BufferedOutputStream(new FileOutputStream(tempFile));
        PGPPublicKeyEncryptedData pbe = findEncryptedDataObject(in);
        
        InputStream clear = pbe.getDataStream(new JcePublicKeyDataDecryptorFactoryBuilder().setProvider("BC").build(privateKey));
        byte[] buffer = new byte[4096];
        int len;
        while ((len = clear.read(buffer)) > 0) {
            out.write(buffer, 0, len);
        }
        out.close();
        in.close();
        System.out.println("Decryption completed, temporary file size: " + tempFile.length());
        return tempFile;
    }

    private PGPPublicKeyEncryptedData findEncryptedDataObject(InputStream in) throws IOException, PGPException {
        PGPObjectFactory pgpF = new PGPObjectFactory(in, new JcaKeyFingerprintCalculator());
        PGPEncryptedDataList enc = null;
        Object object = pgpF.nextObject();
        if (object instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) object;
        } else if (object instanceof PGPCompressedData) {
            enc = (PGPEncryptedDataList) ((PGPCompressedData) object).getDataStream();
        }

        if (enc == null) throw new PGPException("No encrypted data found.");
        
        Iterator<PGPEncryptedData> it = enc.getEncryptedDataObjects();
        if (!it.hasNext()) throw new PGPException("No encrypted data object found.");

        return (PGPPublicKeyEncryptedData) it.next();
    }

    private void decompressFile(File inputFile, String outputFilePath) throws IOException {
        try (GZIPInputStream gzipIn = new GZIPInputStream(new FileInputStream(inputFile));
             FileOutputStream out = new FileOutputStream(outputFilePath)) {
            byte[] buffer = new byte[4096];
            int len;
            while ((len = gzipIn.read(buffer)) > 0) {
                out.write(buffer, 0, len);
            }
        }
        System.out.println("Decompression completed, output file size: " + new File(outputFilePath).length());
    }
}

serviceV3
---------
import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.operator.jcajce.*;
import org.springframework.stereotype.Service;
import java.io.*;
import java.util.zip.GZIPInputStream;
import java.security.Security;

@Service
public class PgpDecryptionService {
    static {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    public void decryptFile(String inputFilePath, String outputFilePath, String privateKeyFilePath, char[] password) throws IOException, PGPException {
        PGPPrivateKey privateKey = readPrivateKey(privateKeyFilePath, password);
        // Decrypt to a stream
        ByteArrayOutputStream decryptedData = decryptToStream(inputFilePath, privateKey);
        // Decompress the decrypted data
        decompressData(decryptedData, new File(outputFilePath));
    }

    private PGPPrivateKey readPrivateKey(String privateKeyFilePath, char[] password) throws IOException, PGPException {
        InputStream keyIn = new BufferedInputStream(new FileInputStream(privateKeyFilePath));
        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(
            PGPUtil.getDecoderStream(keyIn), new JcaKeyFingerprintCalculator());

        Iterator<PGPSecretKeyRing> keyRingIter = pgpSec.getKeyRings();
        while (keyRingIter.hasNext()) {
            PGPSecretKeyRing keyRing = keyRingIter.next();
            Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
            while (keyIter.hasNext()) {
                PGPSecretKey key = keyIter.next();
                if (key.isPrivateKey()) {
                    PGPPrivateKey privateKey = key.extractPrivateKey(
                        new JcePBESecretKeyDecryptorBuilder().setProvider("BC").build(password));
                    if (privateKey != null) {
                        return privateKey;
                    }
                }
            }
        }
        throw new IllegalArgumentException("Valid private key not found in the file.");
    }

    private ByteArrayOutputStream decryptToStream(String inputFilePath, PGPPrivateKey privateKey) throws IOException, PGPException {
        InputStream in = new BufferedInputStream(new FileInputStream(inputFilePath));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PGPObjectFactory pgpF = new PGPObjectFactory(in, new JcaKeyFingerprintCalculator());
        PGPEncryptedDataList enc = null;
        Object object = pgpF.nextObject();
        if (object instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) object;
        } else {
            throw new PGPException("Malformed encrypted data found.");
        }

        PGPPublicKeyEncryptedData pbe = (PGPPublicKeyEncryptedData) enc.getEncryptedDataObjects().next();
        InputStream clear = pbe.getDataStream(new JcePublicKeyDataDecryptorFactoryBuilder().setProvider("BC").build(privateKey));

        byte[] buffer = new byte[4096];
        int len;
        while ((len = clear.read(buffer)) > 0) {
            out.write(buffer, 0, len);
        }

        if (pbe.isIntegrityProtected() && !pbe.verify()) {
            throw new PGPException("Data integrity check failed.");
        }
        System.out.println("Decryption and integrity check complete.");
        in.close();
        return out;
    }

    private void decompressData(ByteArrayOutputStream data, File outputFile) throws IOException {
        byte[] byteData = data.toByteArray();
        InputStream bin = new ByteArrayInputStream(byteData);
        GZIPInputStream gzipIn = new GZIPInputStream(bin);
        OutputStream out = new FileOutputStream(outputFile);

        byte[] buffer = new byte[4096];
        int len;
        while ((len = gzipIn.read(buffer)) > 0) {
            out.write(buffer, 0, len);
        }
        out.close();
        System.out.println("Decompression completed, output file size: " + outputFile.length());
    }
}


