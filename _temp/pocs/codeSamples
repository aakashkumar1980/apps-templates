You're right! The GroupAssignment constructor expects a Map<String, Assignment>, not just a list of partitions. Let's correct this.

Corrected Implementation for Kafka 3.1.1

The assign method needs to return a GroupAssignment, which is a map of consumer IDs to Assignment objects. Each Assignment object contains the list of assigned partitions.

Updated Code:

import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor;
import org.apache.kafka.clients.consumer.GroupSubscription;
import org.apache.kafka.clients.consumer.Subscription;
import org.apache.kafka.common.Cluster;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.clients.consumer.internals.Assignment;

import java.util.*;

public class CustomPartitionAssignor implements ConsumerPartitionAssignor {

    private final Integer id;

    // Constructor to initialize with the dynamic pod ID
    public CustomPartitionAssignor(Integer id) {
        this.id = id;
    }

    @Override
    public GroupAssignment assign(Cluster metadata, GroupSubscription groupSubscription) {
        Map<String, Assignment> assignmentMap = new HashMap<>();

        for (Map.Entry<String, Subscription> entry : groupSubscription.groupSubscription().entrySet()) {
            String consumerId = entry.getKey();  // Consumer client ID
            Subscription subscription = entry.getValue();

            List<TopicPartition> assignedPartitions = new ArrayList<>();

            // Loop through each subscribed topic
            for (String topic : subscription.topics()) {
                int numPartitions = metadata.partitionCountForTopic(topic);
                if (numPartitions > 0) {
                    int partition = (id - 1) % numPartitions;  // Assign based on pod-specific ID
                    assignedPartitions.add(new TopicPartition(topic, partition));
                }
            }

            // Create an Assignment object and map it to the consumer
            assignmentMap.put(consumerId, new Assignment(assignedPartitions));
        }

        return new GroupAssignment(assignmentMap);
    }

    @Override
    public String name() {
        return "CustomPartitionAssignor";
    }
}

Key Fixes & Explanation:

1. Fixed GroupAssignment Usage

Instead of returning a list, we now create a Map<String, Assignment> where:

The key is the consumer ID (consumerId).

The value is an Assignment object containing the list of assigned TopicPartitions.


new GroupAssignment(assignmentMap) now correctly returns the expected object.



2. Consumer-Specific Assignment

Each consumer is assigned only the partition corresponding to its id, ensuring one partition per pod.



3. Partition Validation

Before assigning a partition, we check numPartitions > 0 to prevent division by zero.




Example Usage:

Integer id = idService.getId();  // Retrieve pod-specific ID dynamically

Properties properties = new Properties();
properties.put("bootstrap.servers", "localhost:9092");
properties.put("group.id", "my-consumer-group");
properties.put("enable.auto.commit", "false");
properties.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
properties.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
properties.put("partition.assignment.strategy", CustomPartitionAssignor.class.getName());

KafkaConsumer<String, String> consumer = new KafkaConsumer<>(properties);
consumer.subscribe(Collections.singletonList("my-topic"));

Final Notes:

One Partition Per Pod → Each pod gets exactly one partition, based on id.

Scalability → If there are more pods than partitions, some pods may share partitions.

Correct Return Type → new GroupAssignment(assignmentMap) now compiles correctly.


This implementation ensures that each consumer pod independently assigns itself a partition based on its id while adhering to Kafka 3.1.1's GroupAssignment requirements. Let me know if you need further modifications!

