You're correct! Starting with Kafka 3.1.1, the ConsumerPartitionAssignor interface has changed, and you should implement the GroupAssignment assign(Cluster metadata, GroupSubscription groupSubscription) method instead of assign(List<PartitionAssignor.Subscription> subscriptions). This is part of the updated consumer partition assignment logic.

Hereâ€™s how you can implement the assign method using Kafka 3.1.1:

Updated CustomPartitionAssignor Implementation for Kafka 3.1.1:

import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor;
import org.apache.kafka.clients.consumer.GroupSubscription;
import org.apache.kafka.common.Cluster;
import org.apache.kafka.common.TopicPartition;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CustomPartitionAssignor implements ConsumerPartitionAssignor {

    private Integer id;

    // Constructor that accepts the dynamic 'id'
    public CustomPartitionAssignor(Integer id) {
        this.id = id;
    }

    @Override
    public GroupAssignment assign(Cluster metadata, GroupSubscription groupSubscription) {
        // Create a list to store the assignment of partitions
        List<TopicPartition> assignedPartitions = new ArrayList<>();

        // Iterate through the topics in the group subscription
        for (Map.Entry<String, List<Integer>> entry : groupSubscription.groupAssignment().entrySet()) {
            String topic = entry.getKey();
            List<Integer> partitions = entry.getValue();
            int numPartitions = partitions.size();

            // Calculate the partition to assign based on 'id'
            int partition = (id - 1) % numPartitions; // id starts from 1, subtract 1 to fit zero-based index

            // Directly assign the partition to this pod
            assignedPartitions.add(new TopicPartition(topic, partition));
        }

        // Return the assignment for the group
        return new GroupAssignment(assignedPartitions);
    }

    @Override
    public String name() {
        return "CustomPartitionAssignor";
    }
}

Explanation:

1. GroupAssignment assign(Cluster metadata, GroupSubscription groupSubscription):

The assign method is used to assign partitions to consumers in the group. It takes two parameters:

Cluster metadata: This provides information about the Kafka cluster, including available topics and partitions.

GroupSubscription groupSubscription: This contains the subscription information for the consumer group.


The GroupSubscription object provides the topics and the list of partitions. The groupAssignment() method of GroupSubscription gives the current subscription info.



2. Assign Partitions Based on id:

We loop through the topics in the groupSubscription and fetch their partitions.

Then we use the id (retrieved dynamically, e.g., Integer id = idService.getId();) to directly map to a partition.

The logic (id - 1) % numPartitions ensures that id = 1 maps to partition 0, id = 2 maps to partition 1, etc. If the id exceeds the available partitions, the modulo operation will map it back within range.



3. Returning Group Assignment:

After calculating the partitions, the GroupAssignment object is created, which contains the partitions assigned to this consumer.



4. Custom Partition Logic:

The CustomPartitionAssignor class is designed to ensure that each pod gets its specific partition based on its id, and the mapping works as expected.




Consumer Configuration:

The consumer configuration should be the same as before, but you should now ensure that the custom assignor class is used with the new Kafka 3.1.1 interface:

// Retrieve the pod-specific ID dynamically (e.g., from your DB call)
Integer id = idService.getId();  // Get the unique pod ID, e.g., 1, 2, etc.

// Create a custom partition assignor instance with the retrieved 'id'
CustomPartitionAssignor customAssignor = new CustomPartitionAssignor(id);

Properties properties = new Properties();
properties.put("bootstrap.servers", "localhost:9092");
properties.put("group.id", "my-consumer-group");
properties.put("enable.auto.commit", "false");
properties.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
properties.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
properties.put("partition.assignment.strategy", customAssignor.getClass().getName());

KafkaConsumer<String, String> consumer = new KafkaConsumer<>(properties);
consumer.subscribe(Collections.singletonList("my-topic"));

Final Considerations:

Dynamic Assignment: The id dynamically passed to the assignor determines which partition each consumer pod gets.

Partition Validation: Ensure that the id does not exceed the number of available partitions. If id is too large, you can either throw an error or wrap it using the modulo operator, as demonstrated.


This updated implementation fits Kafka 3.1.1's new consumer assignment API and allows you to control partition assignment dynamically based on the pod's unique id.

