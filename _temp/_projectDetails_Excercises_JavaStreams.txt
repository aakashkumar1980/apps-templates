Certainly! To showcase the usage of Java Stream APIs in your microservices project, here are a few hands-on exercises that reflect real-world scenarios from your project.


---

Exercise 1: Filtering and Transforming Transactions for Offer Redemption

Scenario: Extract eligible transactions where the amount is above the threshold for offer redemption and map them to a simplified response object.

Hands-on Task:

1. Create a Transaction class with fields like transactionId, customerId, amount, merchantId, and date.


2. Use Java Streams to filter transactions where amount > 100 and transform them into a simplified DTO.



Implementation:

import java.util.*;
import java.util.stream.Collectors;

class Transaction {
    String transactionId;
    String customerId;
    double amount;
    String merchantId;
    Date date;

    public Transaction(String transactionId, String customerId, double amount, String merchantId, Date date) {
        this.transactionId = transactionId;
        this.customerId = customerId;
        this.amount = amount;
        this.merchantId = merchantId;
        this.date = date;
    }

    public double getAmount() {
        return amount;
    }

    public String getCustomerId() {
        return customerId;
    }

    @Override
    public String toString() {
        return "Transaction{" + "customerId='" + customerId + '\'' + ", amount=" + amount + '}';
    }
}

public class StreamExample {
    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("T1", "C1", 120.50, "M1", new Date()),
                new Transaction("T2", "C2", 80.00, "M2", new Date()),
                new Transaction("T3", "C1", 200.00, "M3", new Date())
        );

        // Using Streams to filter and transform transactions
        List<String> eligibleTransactions = transactions.stream()
                .filter(txn -> txn.getAmount() > 100) // Filter transactions above 100
                .map(txn -> "Customer: " + txn.getCustomerId() + ", Amount: " + txn.getAmount()) // Transform to simplified output
                .collect(Collectors.toList());

        eligibleTransactions.forEach(System.out::println);
    }
}

Expected Output:

Customer: C1, Amount: 120.5  
Customer: C1, Amount: 200.0

Key Concepts Used:
✔ Filtering (filter())
✔ Transformation (map())
✔ Collecting (collect())


---

Exercise 2: Grouping Offers by Merchant and Counting Redemptions

Scenario: Group offers by merchantId and count how many times they were redeemed.

Hands-on Task:

1. Create an OfferRedemption class with offerId, merchantId, and customerId.


2. Use Streams API to group by merchantId and count redemptions.



Implementation:

import java.util.*;
import java.util.stream.Collectors;

class OfferRedemption {
    String offerId;
    String merchantId;
    String customerId;

    public OfferRedemption(String offerId, String merchantId, String customerId) {
        this.offerId = offerId;
        this.merchantId = merchantId;
        this.customerId = customerId;
    }

    public String getMerchantId() {
        return merchantId;
    }
}

public class OfferRedemptionAnalytics {
    public static void main(String[] args) {
        List<OfferRedemption> redemptions = Arrays.asList(
                new OfferRedemption("O1", "M1", "C1"),
                new OfferRedemption("O2", "M1", "C2"),
                new OfferRedemption("O3", "M2", "C1"),
                new OfferRedemption("O4", "M2", "C3"),
                new OfferRedemption("O5", "M1", "C4")
        );

        // Group by merchant and count redemptions
        Map<String, Long> redemptionCountByMerchant = redemptions.stream()
                .collect(Collectors.groupingBy(OfferRedemption::getMerchantId, Collectors.counting()));

        redemptionCountByMerchant.forEach((merchant, count) ->
                System.out.println("Merchant: " + merchant + ", Redemptions: " + count));
    }
}

Expected Output:

Merchant: M1, Redemptions: 3  
Merchant: M2, Redemptions: 2

Key Concepts Used:
✔ Grouping (groupingBy())
✔ Counting (counting())


---

Exercise 3: Sorting Customers by Their Total Spent Amount

Scenario: Sort customers based on the total amount they have spent across multiple transactions.

Hands-on Task:

1. Use a list of Transaction objects.


2. Group transactions by customerId and calculate total spending.


3. Sort the customers based on total spending in descending order.



Implementation:

import java.util.*;
import java.util.stream.Collectors;

public class CustomerSpendingAnalytics {
    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("T1", "C1", 120.50, "M1", new Date()),
                new Transaction("T2", "C2", 80.00, "M2", new Date()),
                new Transaction("T3", "C1", 200.00, "M3", new Date()),
                new Transaction("T4", "C3", 50.00, "M1", new Date()),
                new Transaction("T5", "C2", 150.00, "M2", new Date())
        );

        // Group by customerId and sum the total spending, then sort
        Map<String, Double> totalSpendingByCustomer = transactions.stream()
                .collect(Collectors.groupingBy(Transaction::getCustomerId,
                        Collectors.summingDouble(Transaction::getAmount)));

        // Sort customers by total spending in descending order
        totalSpendingByCustomer.entrySet().stream()
                .sorted(Map.Entry.<String, Double>comparingByValue(Comparator.reverseOrder()))
                .forEach(entry -> System.out.println("Customer: " + entry.getKey() + ", Total Spent: " + entry.getValue()));
    }
}

Expected Output:

Customer: C1, Total Spent: 320.5  
Customer: C2, Total Spent: 230.0  
Customer: C3, Total Spent: 50.0

Key Concepts Used:
✔ Grouping (groupingBy())
✔ Aggregation (summingDouble())
✔ Sorting (sorted())


---

Key Takeaways from These Exercises:

1. Filtering & Mapping → Extract and transform relevant data from collections.


2. Grouping & Aggregation → Perform analytics like counting and summing values.


3. Sorting & Ranking → Sort data based on computed metrics like total spending.


4. Stream API Optimizations → Use functional programming for concise and efficient processing.



These exercises directly relate to real-world use cases from your microservices project, making them perfect for interviews or showcasing hands-on experience.

Would you like exercises for React.js, Kafka, Kubernetes, or Security (OAuth & Encryption) as well?

